name: Devminjeong-eum-Backend-Production

on:
  push:
    branches:
      - main
      - feature/DEV-79

jobs:
  # build-image:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and Push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         push: true
  #         # platforms: linux/amd64,linux/arm64/v8
  #         file: ./docker/backend/Dockerfile 
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devminjeong-eum-backend:latest
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  deploy-application:
    # needs: build-image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Create Environment Variable File
      run: |
        mkdir -p ./src/config
        cat <<EOF > ./src/config/env.production
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_DATABASE=${{ secrets.DB_DATABASE }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
        KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_SECRET_KEY=${{ secrets.KAKAO_SECRET_KEY }}
        GOOGLE_API_EMAIL=${{ secrets.GOOGLE_API_EMAIL }}
        GOOGLE_PRIVATE_KEY="${{ secrets.GOOGLE_PRIVATE_KEY }}"
        GOOGLE_SPREAD_SHEET_ID=${{ secrets.GOOGLE_SPREAD_SHEET_ID }}
        SERVER_PORT=${{ secrets.SERVER_PORT }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        TEST_ADMIN_KEY=${{ secrets.TEST_ADMIN_KEY }}
        DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
        EOF

    - name: Setup Environment Variable Cache
      id: cache-env-file
      uses: actions/cache@v4
      with:
        path: ./src/config/env.production
        key: ${{ runner.os }}-env-${{ hashFiles('./src/config/env.production') }}
        restore-keys: |
          ${{ runner.os }}-env-

    - name: Check Configuration File Changes
      run: |
        git fetch origin main
        DIFF_DOCKER_COMPOSE=$(git diff --name-only HEAD HEAD~1 -- ./docker-compose.yml)
        DIFF_DOCKER_CONFIGS=$(git diff --name-only HEAD HEAD~1 -- ./docker)
        CHANGE_DIFF=()

        if [ -n "$DIFF_DOCKER_COMPOSE" ]; then
          echo "Cache Miss: Docker Compose Configuration file have changed"
          CHANGE_DIFF+=("./docker-compose.yml")
        fi

        if [ -n "$DIFF_DOCKER_CONFIGS" ]; then
          echo "Cache miss: One of Docker Configuration files have changed"
          CHANGE_DIFF+=("./docker")
        fi

        CACHE_HIT=${{ steps.cache-env-file.outputs.cache-hit }}
        if [ "$CACHE_HIT" = "true" ]; then
          if cmp -s ./src/config/env.production $CACHE_HIT; then
            echo "Cache hit: Cached Environment Variables have not changed"
            ENV_FILES_CHANGED=false
          else
            echo "Cache miss: Cached Environment Variables have changed"
            ENV_FILES_CHANGED=true
          fi
        else
          echo "Cache miss: Cached Environment Variables not exists"
          ENV_FILES_CHANGED=true
        fi

        if [ "$ENV_FILES_CHANGED" = true ]; then
          CHANGE_DIFF+=("./src/config/env.production")
        fi

        IFS=','; echo "CHANGE_DIFF=${CHANGE_DIFF[*]}" >> $GITHUB_ENV

    - name: Copy Configuration Files
      if: ${{ env.CHANGE_DIFF != '' }}
      uses: appleboy/scp-action@v0.1.7
      with: 
        host: ${{ secrets.EC2_SSH_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ${{ env.CHANGE_DIFF }}
        target: "/home/${{ secrets.EC2_SSH_USER }}/dev-malssami"

    - name: Deploy Project to AWS EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_SSH_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /home/${{ secrets.EC2_SSH_USER }}/dev-malssami
          sudo docker system prune -a --volumes -f

          if [ "$(sudo docker ps -q -f name=backend)" ]; then
            sudo docker-compose -f ./docker-compose.yml --env-file ./env.production stop backend
            sudo docker-compose -f ./docker-compose.yml --env-file ./env.production rm -f backend
          fi

          sudo docker-compose -f ./docker-compose.yml --env-file ./env.production pull -q
          sudo docker-compose -f ./docker-compose.yml --env-file ./env.production up -d --build backend